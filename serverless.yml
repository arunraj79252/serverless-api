service: serverless-api
frameworkVersion: '3'

custom:
  tableName: 'users-table-${sls:stage}'
  demoTable: 'demo-table-${sls:stage}'
  clientId: '48peqjjsp7pjostg6eng9ka4e5'
  userPoolId: 'us-east-1_eWeqxxtL3'

provider:
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - !GetAtt DemoTable.Arn
  environment:
    USERS_TABLE: ${self:custom.tableName}
    DEMO_TABLE: ${self:custom.demoTable}
    CLIENT_ID: ${self:custom.clientId}
    USER_POOL_ID: ${self:custom.userPoolId}

functions:
  api:
    handler: handler.handler
    events:
      - httpApi: '*'

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    DemoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: demoId
            AttributeType: S
        KeySchema:
          - AttributeName: demoId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.demoTable}
